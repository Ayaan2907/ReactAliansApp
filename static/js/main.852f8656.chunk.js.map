{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","username","id","className","alt","src","title","CardList","robos","map","user","i","key","SearchBoxName","SearchInputName","onSearchByName","type","placeholder","onChange","Scroll","props","style","overflowY","height","scrollBehavior","children","App","event","setState","target","value","state","fetch","then","response","json","users","this","filterRoboByName","filter","robo","toLowerCase","includes","length","SearchBox","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.852f8656.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\n\n\nconst Card = ({ name, username, id }) => {\n\n      return (\n            <Fragment>\n\n                  <div className=\" bg-light-blue dib br3 pa3 ma2 bw3 tc grow shadow 100px  \" >\n\n                        <img\n                              alt=\"myPic\"\n                              src={`https://robohash.org/RandomTextInputforImage${id}`}>\n                        </img>\n\n                        <div >\n                              <h1 title={`name: ${name} `}> {name} </h1>\n                              <p className='blue br bb bg-white' title={`username: ${username}`}>{username}</p>\n\n                        </div>\n\n                  </div>\n\n            </Fragment>\n      );\n\n}\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robos }) => {\n      const cardArray = robos.map((user, i) => {\n            return (<Card\n                  key={robos[i].id}\n                  id={robos[i].id}\n                  name={robos[i].name}\n                  username={robos[i].username} />);\n      });\n      return (cardArray);\n};\n\n\nexport default CardList;","import React from 'react';\n\n\nconst SearchBoxName = ({ SearchInputName, onSearchByName }) =>\n      <>\n            <div className='pa2 tc'>\n                  <input\n                        className='bg-light-blue bb  dib br3 pa2 ma1 bw1  tc grow shadow 50px '\n                        type=\"search\"\n                        placeholder='here search aliens by name '\n                        onChange={onSearchByName} /* onChange is an html property*/\n                  />\n\n            </div>\n            <hr />\n      </>\n\n\nexport default SearchBoxName;","import React from 'react';\n\n\nconst Scroll = (props) =>\n      <div style={{ overflowY: \"scroll\", height: '800px', scrollBehavior: 'auto' }}>\n            {props.children}\n      </div>\n\n\nexport default Scroll;","import React, { Fragment, Component } from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBoxName from '../Components/SearchBox.js'\nimport Scroll from '../Components/Scroll'\nimport './App.css'\n// import { robos } from '../Components/roboList'\n\n\nclass App extends Component {\n      constructor() {\n            super()\n            this.state = {\n                  // robos: robos,\n                  robos: [],\n                  SearchInputName: '',\n            };\n      };\n\n\n      componentDidMount() {\n            fetch('https://jsonplaceholder.typicode.com/users')\n                  .then(response => response.json())\n                  .then(users => { this.setState({ robos: users }) });\n      };\n\n\n      onSearchByName = (event =>\n            this.setState({ SearchInputName: event.target.value }));\n      // const filterRobo = this.state.robos.filter(robo=>{\n      //       return robo.name.toLowerCase().includes(this.state.SearchInput.toLowerCase())\n      // })\n      // console.log(filterRobo)\n\n\n      render() {\n            const {robos, SearchInputName} = this.state;\n\n            const filterRoboByName = robos.filter(robo =>\n                  robo.name.toLowerCase().includes(SearchInputName.toLowerCase()));\n\n\n            return (!robos.length ?\n                  <h1>waiting&#10148;&#10148;&#10148;</h1> :\n                  <Fragment>\n                        <div className='tc '>\n                              <h1 className='custome'>alien Friends</h1>\n                              <p className='custome'>type the name of alien you want from here</p>\n                              <SearchBoxName onSearchByName={this.onSearchByName} />\n\n                              <Scroll>\n                                    {/* <CardList robos={this.state.robos} /> */}\n                                    <CardList robos={filterRoboByName} />\n                              </Scroll>\n                        </div>\n                  </Fragment>\n            );\n      };\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons'\nimport App from './Containers/App.js';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>  <App />  </React.StrictMode>,\n document.getElementById('root')\n);\n\n\nserviceWorker.register();\n"],"sourceRoot":""}